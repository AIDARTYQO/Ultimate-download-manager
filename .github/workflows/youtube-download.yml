name: Download YouTube Video (Alternative Method)

on:
  workflow_dispatch:

jobs:
  download-video:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Git LFS
        run: git lfs install

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests urllib3 beautifulsoup4
          sudo apt-get update
          sudo apt-get install -y ffmpeg aria2

      - name: Create download script
        run: |
          cat > download_video.py << 'EOL'
          import requests
          from bs4 import BeautifulSoup
          import json
          import subprocess
          import time
          import os
          
          def get_video_info(video_id):
              # נסה מספר שרתים חלופיים
              servers = [
                  f"https://api.vevioz.com/@api/json/mp4/{video_id}",
                  f"https://api.yt-download.org/api/mp4/{video_id}",
                  f"https://api.loader.to/api/mp4/{video_id}"
              ]
              
              headers = {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                  'Accept': 'application/json',
                  'Accept-Language': 'en-US,en;q=0.9',
                  'Referer': 'https://www.youtube.com/'
              }
              
              for server in servers:
                  try:
                      response = requests.get(server, headers=headers, timeout=30)
                      if response.status_code == 200:
                          data = response.json()
                          if isinstance(data, dict) and 'url' in data:
                              return data['url']
                  except:
                      continue
              return None
          
          def download_with_aria2(url, output_file):
              command = [
                  'aria2c',
                  '--max-tries=5',
                  '--retry-wait=10',
                  '--max-connection-per-server=16',
                  '--split=16',
                  '--min-split-size=1M',
                  '--header=User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                  '--header=Accept: */*',
                  '--header=Accept-Language: en-US,en;q=0.9',
                  '--header=Range: bytes=0-',
                  f'--out={output_file}',
                  url
              ]
              return subprocess.run(command).returncode == 0
          
          def main():
              video_id = "i0tFsOAMmBs"  # החלף למזהה הסרטון שלך
              output_file = "downloads/video.mp4"
              
              for attempt in range(3):
                  print(f"Attempt {attempt + 1} to get video info...")
                  
                  video_url = get_video_info(video_id)
                  if video_url:
                      print("Got video URL, starting download...")
                      if download_with_aria2(video_url, output_file):
                          print("Download completed successfully!")
                          return True
                  
                  if attempt < 2:
                      print("Waiting 30 seconds before retry...")
                      time.sleep(30)
              
              return False
          
          if __name__ == "__main__":
              os.makedirs("downloads", exist_ok=True)
              if not main():
                  exit(1)
          EOL

      - name: Download video
        run: python download_video.py

      - name: Verify download
        run: |
          if [ ! -f downloads/video.mp4 ]; then
            echo "Video download failed or file not found"
            exit 1
          fi
          echo "Video downloaded successfully"
          ls -lh downloads/

      - name: Setup Git LFS file tracking
        run: |
          git lfs track "downloads/video.mp4"
          git add .gitattributes

      - name: Commit and push video
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "downloads/video.mp4"
          git commit -m "Add downloaded video"
          git push
